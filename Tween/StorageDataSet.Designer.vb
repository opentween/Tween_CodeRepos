'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.3053
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("StorageDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class StorageDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablePosts As PostsDataTable
    
    Private tableIcons As IconsDataTable
    
    Private relationIcons_Posts As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Posts")) Is Nothing) Then
                MyBase.Tables.Add(New PostsDataTable(ds.Tables("Posts")))
            End If
            If (Not (ds.Tables("Icons")) Is Nothing) Then
                MyBase.Tables.Add(New IconsDataTable(ds.Tables("Icons")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Posts() As PostsDataTable
        Get
            Return Me.tablePosts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Icons() As IconsDataTable
        Get
            Return Me.tableIcons
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As StorageDataSet = CType(MyBase.Clone,StorageDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Posts")) Is Nothing) Then
                MyBase.Tables.Add(New PostsDataTable(ds.Tables("Posts")))
            End If
            If (Not (ds.Tables("Icons")) Is Nothing) Then
                MyBase.Tables.Add(New IconsDataTable(ds.Tables("Icons")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePosts = CType(MyBase.Tables("Posts"),PostsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePosts) Is Nothing) Then
                Me.tablePosts.InitVars
            End If
        End If
        Me.tableIcons = CType(MyBase.Tables("Icons"),IconsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIcons) Is Nothing) Then
                Me.tableIcons.InitVars
            End If
        End If
        Me.relationIcons_Posts = Me.Relations("Icons_Posts")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "StorageDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/StorageDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePosts = New PostsDataTable
        MyBase.Tables.Add(Me.tablePosts)
        Me.tableIcons = New IconsDataTable
        MyBase.Tables.Add(Me.tableIcons)
        Me.relationIcons_Posts = New Global.System.Data.DataRelation("Icons_Posts", New Global.System.Data.DataColumn() {Me.tableIcons.imageUriColumn}, New Global.System.Data.DataColumn() {Me.tablePosts.imageUriColumn}, false)
        Me.Relations.Add(Me.relationIcons_Posts)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePosts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIcons() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As StorageDataSet = New StorageDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PostsRowChangeEventHandler(ByVal sender As Object, ByVal e As PostsRowChangeEvent)
    
    Public Delegate Sub IconsRowChangeEventHandler(ByVal sender As Object, ByVal e As IconsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PostsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columntimestamp As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnscreenName As Global.System.Data.DataColumn
        
        Private columnimageUri As Global.System.Data.DataColumn
        
        Private columntext As Global.System.Data.DataColumn
        
        Private columnhyperText As Global.System.Data.DataColumn
        
        Private columnsource As Global.System.Data.DataColumn
        
        Private columninReplyToUser As Global.System.Data.DataColumn
        
        Private columninReplyToId As Global.System.Data.DataColumn
        
        Private columnisRead As Global.System.Data.DataColumn
        
        Private columnisFavorited As Global.System.Data.DataColumn
        
        Private columnisReply As Global.System.Data.DataColumn
        
        Private columnisProtected As Global.System.Data.DataColumn
        
        Private columnisOneWayLove As Global.System.Data.DataColumn
        
        Private columntags As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Posts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property screenNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnscreenName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imageUriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimageUri
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property textColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hyperTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhyperText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inReplyToUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninReplyToUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inReplyToIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninReplyToId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isReadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisRead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isFavoritedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisFavorited
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isReplyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisReply
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isProtectedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisProtected
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isOneWayLoveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisOneWayLove
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tagsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntags
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PostsRow
            Get
                Return CType(Me.Rows(index),PostsRow)
            End Get
        End Property
        
        Public Event PostsRowChanging As PostsRowChangeEventHandler
        
        Public Event PostsRowChanged As PostsRowChangeEventHandler
        
        Public Event PostsRowDeleting As PostsRowChangeEventHandler
        
        Public Event PostsRowDeleted As PostsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPostsRow(ByVal row As PostsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPostsRow( _
                    ByVal id As Long,  _
                    ByVal timestamp As Date,  _
                    ByVal name As String,  _
                    ByVal screenName As String,  _
                    ByVal parentIconsRowByIcons_Posts As IconsRow,  _
                    ByVal text As String,  _
                    ByVal hyperText As String,  _
                    ByVal source As String,  _
                    ByVal inReplyToUser As String,  _
                    ByVal inReplyToId As Long,  _
                    ByVal isRead As Boolean,  _
                    ByVal isFavorited As Boolean,  _
                    ByVal isReply As Boolean,  _
                    ByVal isProtected As Boolean,  _
                    ByVal isOneWayLove As Boolean,  _
                    ByVal tags As String) As PostsRow
            Dim rowPostsRow As PostsRow = CType(Me.NewRow,PostsRow)
            Dim columnValuesArray() As Object = New Object() {id, timestamp, name, screenName, Nothing, text, hyperText, source, inReplyToUser, inReplyToId, isRead, isFavorited, isReply, isProtected, isOneWayLove, tags}
            If (Not (parentIconsRowByIcons_Posts) Is Nothing) Then
                columnValuesArray(4) = parentIconsRowByIcons_Posts(0)
            End If
            rowPostsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPostsRow)
            Return rowPostsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid(ByVal id As Long) As PostsRow
            Return CType(Me.Rows.Find(New Object() {id}),PostsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PostsDataTable = CType(MyBase.Clone,PostsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PostsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columntimestamp = MyBase.Columns("timestamp")
            Me.columnname = MyBase.Columns("name")
            Me.columnscreenName = MyBase.Columns("screenName")
            Me.columnimageUri = MyBase.Columns("imageUri")
            Me.columntext = MyBase.Columns("text")
            Me.columnhyperText = MyBase.Columns("hyperText")
            Me.columnsource = MyBase.Columns("source")
            Me.columninReplyToUser = MyBase.Columns("inReplyToUser")
            Me.columninReplyToId = MyBase.Columns("inReplyToId")
            Me.columnisRead = MyBase.Columns("isRead")
            Me.columnisFavorited = MyBase.Columns("isFavorited")
            Me.columnisReply = MyBase.Columns("isReply")
            Me.columnisProtected = MyBase.Columns("isProtected")
            Me.columnisOneWayLove = MyBase.Columns("isOneWayLove")
            Me.columntags = MyBase.Columns("tags")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columntimestamp = New Global.System.Data.DataColumn("timestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnscreenName = New Global.System.Data.DataColumn("screenName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnscreenName)
            Me.columnimageUri = New Global.System.Data.DataColumn("imageUri", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimageUri)
            Me.columntext = New Global.System.Data.DataColumn("text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntext)
            Me.columnhyperText = New Global.System.Data.DataColumn("hyperText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhyperText)
            Me.columnsource = New Global.System.Data.DataColumn("source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsource)
            Me.columninReplyToUser = New Global.System.Data.DataColumn("inReplyToUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninReplyToUser)
            Me.columninReplyToId = New Global.System.Data.DataColumn("inReplyToId", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninReplyToId)
            Me.columnisRead = New Global.System.Data.DataColumn("isRead", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisRead)
            Me.columnisFavorited = New Global.System.Data.DataColumn("isFavorited", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisFavorited)
            Me.columnisReply = New Global.System.Data.DataColumn("isReply", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisReply)
            Me.columnisProtected = New Global.System.Data.DataColumn("isProtected", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisProtected)
            Me.columnisOneWayLove = New Global.System.Data.DataColumn("isOneWayLove", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisOneWayLove)
            Me.columntags = New Global.System.Data.DataColumn("tags", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntags)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnid.Unique = true
            Me.columntimestamp.AllowDBNull = false
            Me.columntimestamp.ReadOnly = true
            Me.columntimestamp.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnname.AllowDBNull = false
            Me.columnname.ReadOnly = true
            Me.columnname.MaxLength = 2147483647
            Me.columnscreenName.AllowDBNull = false
            Me.columnscreenName.ReadOnly = true
            Me.columnscreenName.MaxLength = 2147483647
            Me.columnimageUri.AllowDBNull = false
            Me.columnimageUri.ReadOnly = true
            Me.columnimageUri.MaxLength = 2147483647
            Me.columntext.AllowDBNull = false
            Me.columntext.ReadOnly = true
            Me.columntext.MaxLength = 2147483647
            Me.columnhyperText.AllowDBNull = false
            Me.columnhyperText.ReadOnly = true
            Me.columnhyperText.MaxLength = 2147483647
            Me.columnsource.AllowDBNull = false
            Me.columnsource.ReadOnly = true
            Me.columnsource.MaxLength = 2147483647
            Me.columninReplyToUser.ReadOnly = true
            Me.columninReplyToUser.MaxLength = 2147483647
            Me.columninReplyToId.ReadOnly = true
            Me.columnisRead.AllowDBNull = false
            Me.columnisFavorited.AllowDBNull = false
            Me.columnisReply.AllowDBNull = false
            Me.columnisReply.ReadOnly = true
            Me.columnisProtected.AllowDBNull = false
            Me.columnisProtected.ReadOnly = true
            Me.columnisOneWayLove.AllowDBNull = false
            Me.columntags.AllowDBNull = false
            Me.columntags.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPostsRow() As PostsRow
            Return CType(Me.NewRow,PostsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PostsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PostsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PostsRowChangedEvent) Is Nothing) Then
                RaiseEvent PostsRowChanged(Me, New PostsRowChangeEvent(CType(e.Row,PostsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PostsRowChangingEvent) Is Nothing) Then
                RaiseEvent PostsRowChanging(Me, New PostsRowChangeEvent(CType(e.Row,PostsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PostsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PostsRowDeleted(Me, New PostsRowChangeEvent(CType(e.Row,PostsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PostsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PostsRowDeleting(Me, New PostsRowChangeEvent(CType(e.Row,PostsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePostsRow(ByVal row As PostsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StorageDataSet = New StorageDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PostsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IconsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnimageUri As Global.System.Data.DataColumn
        
        Private columnwidth As Global.System.Data.DataColumn
        
        Private columnheight As Global.System.Data.DataColumn
        
        Private columnimage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Icons"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imageUriColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimageUri
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property widthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwidth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property heightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnheight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IconsRow
            Get
                Return CType(Me.Rows(index),IconsRow)
            End Get
        End Property
        
        Public Event IconsRowChanging As IconsRowChangeEventHandler
        
        Public Event IconsRowChanged As IconsRowChangeEventHandler
        
        Public Event IconsRowDeleting As IconsRowChangeEventHandler
        
        Public Event IconsRowDeleted As IconsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIconsRow(ByVal row As IconsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIconsRow(ByVal imageUri As String, ByVal width As Integer, ByVal height As Integer, ByVal image() As Byte) As IconsRow
            Dim rowIconsRow As IconsRow = CType(Me.NewRow,IconsRow)
            Dim columnValuesArray() As Object = New Object() {imageUri, width, height, image}
            rowIconsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIconsRow)
            Return rowIconsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByimageUri(ByVal imageUri As String) As IconsRow
            Return CType(Me.Rows.Find(New Object() {imageUri}),IconsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IconsDataTable = CType(MyBase.Clone,IconsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IconsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnimageUri = MyBase.Columns("imageUri")
            Me.columnwidth = MyBase.Columns("width")
            Me.columnheight = MyBase.Columns("height")
            Me.columnimage = MyBase.Columns("image")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnimageUri = New Global.System.Data.DataColumn("imageUri", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimageUri)
            Me.columnwidth = New Global.System.Data.DataColumn("width", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwidth)
            Me.columnheight = New Global.System.Data.DataColumn("height", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnheight)
            Me.columnimage = New Global.System.Data.DataColumn("image", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnimageUri}, true))
            Me.columnimageUri.AllowDBNull = false
            Me.columnimageUri.ReadOnly = true
            Me.columnimageUri.Unique = true
            Me.columnimageUri.MaxLength = 2147483647
            Me.columnwidth.AllowDBNull = false
            Me.columnwidth.ReadOnly = true
            Me.columnheight.AllowDBNull = false
            Me.columnheight.ReadOnly = true
            Me.columnimage.AllowDBNull = false
            Me.columnimage.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIconsRow() As IconsRow
            Return CType(Me.NewRow,IconsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IconsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IconsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IconsRowChangedEvent) Is Nothing) Then
                RaiseEvent IconsRowChanged(Me, New IconsRowChangeEvent(CType(e.Row,IconsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IconsRowChangingEvent) Is Nothing) Then
                RaiseEvent IconsRowChanging(Me, New IconsRowChangeEvent(CType(e.Row,IconsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IconsRowDeletedEvent) Is Nothing) Then
                RaiseEvent IconsRowDeleted(Me, New IconsRowChangeEvent(CType(e.Row,IconsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IconsRowDeletingEvent) Is Nothing) Then
                RaiseEvent IconsRowDeleting(Me, New IconsRowChangeEvent(CType(e.Row,IconsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIconsRow(ByVal row As IconsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As StorageDataSet = New StorageDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IconsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PostsRow
        Inherits Global.System.Data.DataRow
        
        Private tablePosts As PostsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePosts = CType(Me.Table,PostsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablePosts.idColumn),Long)
            End Get
            Set
                Me(Me.tablePosts.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property timestamp() As Date
            Get
                Return CType(Me(Me.tablePosts.timestampColumn),Date)
            End Get
            Set
                Me(Me.tablePosts.timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablePosts.nameColumn),String)
            End Get
            Set
                Me(Me.tablePosts.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property screenName() As String
            Get
                Return CType(Me(Me.tablePosts.screenNameColumn),String)
            End Get
            Set
                Me(Me.tablePosts.screenNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imageUri() As String
            Get
                Return CType(Me(Me.tablePosts.imageUriColumn),String)
            End Get
            Set
                Me(Me.tablePosts.imageUriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property text() As String
            Get
                Return CType(Me(Me.tablePosts.textColumn),String)
            End Get
            Set
                Me(Me.tablePosts.textColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hyperText() As String
            Get
                Return CType(Me(Me.tablePosts.hyperTextColumn),String)
            End Get
            Set
                Me(Me.tablePosts.hyperTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property source() As String
            Get
                Return CType(Me(Me.tablePosts.sourceColumn),String)
            End Get
            Set
                Me(Me.tablePosts.sourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inReplyToUser() As String
            Get
                Try 
                    Return CType(Me(Me.tablePosts.inReplyToUserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'Posts' にある列 'inReplyToUser' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablePosts.inReplyToUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inReplyToId() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePosts.inReplyToIdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("テーブル 'Posts' にある列 'inReplyToId' の値は DBNull です。", e)
                End Try
            End Get
            Set
                Me(Me.tablePosts.inReplyToIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isRead() As Boolean
            Get
                Return CType(Me(Me.tablePosts.isReadColumn),Boolean)
            End Get
            Set
                Me(Me.tablePosts.isReadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isFavorited() As Boolean
            Get
                Return CType(Me(Me.tablePosts.isFavoritedColumn),Boolean)
            End Get
            Set
                Me(Me.tablePosts.isFavoritedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isReply() As Boolean
            Get
                Return CType(Me(Me.tablePosts.isReplyColumn),Boolean)
            End Get
            Set
                Me(Me.tablePosts.isReplyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isProtected() As Boolean
            Get
                Return CType(Me(Me.tablePosts.isProtectedColumn),Boolean)
            End Get
            Set
                Me(Me.tablePosts.isProtectedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isOneWayLove() As Boolean
            Get
                Return CType(Me(Me.tablePosts.isOneWayLoveColumn),Boolean)
            End Get
            Set
                Me(Me.tablePosts.isOneWayLoveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tags() As String
            Get
                Return CType(Me(Me.tablePosts.tagsColumn),String)
            End Get
            Set
                Me(Me.tablePosts.tagsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IconsRow() As IconsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Icons_Posts")),IconsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Icons_Posts"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinReplyToUserNull() As Boolean
            Return Me.IsNull(Me.tablePosts.inReplyToUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinReplyToUserNull()
            Me(Me.tablePosts.inReplyToUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinReplyToIdNull() As Boolean
            Return Me.IsNull(Me.tablePosts.inReplyToIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinReplyToIdNull()
            Me(Me.tablePosts.inReplyToIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IconsRow
        Inherits Global.System.Data.DataRow
        
        Private tableIcons As IconsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIcons = CType(Me.Table,IconsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imageUri() As String
            Get
                Return CType(Me(Me.tableIcons.imageUriColumn),String)
            End Get
            Set
                Me(Me.tableIcons.imageUriColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property width() As Integer
            Get
                Return CType(Me(Me.tableIcons.widthColumn),Integer)
            End Get
            Set
                Me(Me.tableIcons.widthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property height() As Integer
            Get
                Return CType(Me(Me.tableIcons.heightColumn),Integer)
            End Get
            Set
                Me(Me.tableIcons.heightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property image() As Byte()
            Get
                Return CType(Me(Me.tableIcons.imageColumn),Byte())
            End Get
            Set
                Me(Me.tableIcons.imageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPostsRows() As PostsRow()
            If (Me.Table.ChildRelations("Icons_Posts") Is Nothing) Then
                Return New PostsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Icons_Posts")),PostsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PostsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PostsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PostsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PostsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IconsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IconsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IconsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IconsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace StorageDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PostsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Posts"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("timestamp", "timestamp")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("screenName", "screenName")
            tableMapping.ColumnMappings.Add("imageUri", "imageUri")
            tableMapping.ColumnMappings.Add("text", "text")
            tableMapping.ColumnMappings.Add("hyperText", "hyperText")
            tableMapping.ColumnMappings.Add("source", "source")
            tableMapping.ColumnMappings.Add("inReplyToUser", "inReplyToUser")
            tableMapping.ColumnMappings.Add("inReplyToId", "inReplyToId")
            tableMapping.ColumnMappings.Add("isRead", "isRead")
            tableMapping.ColumnMappings.Add("isFavorited", "isFavorited")
            tableMapping.ColumnMappings.Add("isReply", "isReply")
            tableMapping.ColumnMappings.Add("isProtected", "isProtected")
            tableMapping.ColumnMappings.Add("isOneWayLove", "isOneWayLove")
            tableMapping.ColumnMappings.Add("tags", "tags")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Posts] WHERE (([id] = @Original_id) AND ([timestamp] = @Original_tim"& _ 
                "estamp) AND ([name] = @Original_name) AND ([screenName] = @Original_screenName) "& _ 
                "AND ([imageUri] = @Original_imageUri) AND ([text] = @Original_text) AND ([hyperT"& _ 
                "ext] = @Original_hyperText) AND ([source] = @Original_source) AND ((@IsNull_inRe"& _ 
                "plyToUser = 1 AND [inReplyToUser] IS NULL) OR ([inReplyToUser] = @Original_inRep"& _ 
                "lyToUser)) AND ((@IsNull_inReplyToId = 1 AND [inReplyToId] IS NULL) OR ([inReply"& _ 
                "ToId] = @Original_inReplyToId)) AND ([isRead] = @Original_isRead) AND ([isFavori"& _ 
                "ted] = @Original_isFavorited) AND ([isReply] = @Original_isReply) AND ([isProtec"& _ 
                "ted] = @Original_isProtected) AND ([isOneWayLove] = @Original_isOneWayLove) AND "& _ 
                "([tags] = @Original_tags))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_timestamp"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "timestamp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_screenName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "screenName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_text"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "text"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_hyperText"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hyperText"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_source"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "source"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@IsNull_inReplyToUser"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "inReplyToUser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_inReplyToUser"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "inReplyToUser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@IsNull_inReplyToId"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "inReplyToId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_inReplyToId"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "inReplyToId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isRead"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isRead"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isFavorited"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isFavorited"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isReply"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isReply"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isProtected"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isProtected"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isOneWayLove"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isOneWayLove"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_tags"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "tags"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Posts] ([id], [timestamp], [name], [screenName], [imageUri], [text],"& _ 
                " [hyperText], [source], [inReplyToUser], [inReplyToId], [isRead], [isFavorited],"& _ 
                " [isReply], [isProtected], [isOneWayLove], [tags]) VALUES (@id, @timestamp, @nam"& _ 
                "e, @screenName, @imageUri, @text, @hyperText, @source, @inReplyToUser, @inReplyT"& _ 
                "oId, @isRead, @isFavorited, @isReply, @isProtected, @isOneWayLove, @tags)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@timestamp"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "timestamp"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@screenName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "screenName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@text"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "text"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@hyperText"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hyperText"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@source"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "source"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@inReplyToUser"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "inReplyToUser"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@inReplyToId"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "inReplyToId"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isRead"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isRead"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isFavorited"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isFavorited"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isReply"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isReply"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isProtected"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isProtected"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isOneWayLove"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isOneWayLove"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@tags"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "tags"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Posts] SET [id] = @id, [timestamp] = @timestamp, [name] = @name, [screenN"& _ 
                "ame] = @screenName, [imageUri] = @imageUri, [text] = @text, [hyperText] = @hyper"& _ 
                "Text, [source] = @source, [inReplyToUser] = @inReplyToUser, [inReplyToId] = @inR"& _ 
                "eplyToId, [isRead] = @isRead, [isFavorited] = @isFavorited, [isReply] = @isReply"& _ 
                ", [isProtected] = @isProtected, [isOneWayLove] = @isOneWayLove, [tags] = @tags W"& _ 
                "HERE (([id] = @Original_id) AND ([timestamp] = @Original_timestamp) AND ([name] "& _ 
                "= @Original_name) AND ([screenName] = @Original_screenName) AND ([imageUri] = @O"& _ 
                "riginal_imageUri) AND ([text] = @Original_text) AND ([hyperText] = @Original_hyp"& _ 
                "erText) AND ([source] = @Original_source) AND ((@IsNull_inReplyToUser = 1 AND [i"& _ 
                "nReplyToUser] IS NULL) OR ([inReplyToUser] = @Original_inReplyToUser)) AND ((@Is"& _ 
                "Null_inReplyToId = 1 AND [inReplyToId] IS NULL) OR ([inReplyToId] = @Original_in"& _ 
                "ReplyToId)) AND ([isRead] = @Original_isRead) AND ([isFavorited] = @Original_isF"& _ 
                "avorited) AND ([isReply] = @Original_isReply) AND ([isProtected] = @Original_isP"& _ 
                "rotected) AND ([isOneWayLove] = @Original_isOneWayLove) AND ([tags] = @Original_"& _ 
                "tags))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@timestamp"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "timestamp"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@screenName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "screenName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@text"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "text"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@hyperText"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hyperText"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@source"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "source"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@inReplyToUser"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "inReplyToUser"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@inReplyToId"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "inReplyToId"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isRead"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isRead"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isFavorited"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isFavorited"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isReply"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isReply"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isProtected"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isProtected"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@isOneWayLove"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isOneWayLove"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@tags"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "tags"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_timestamp"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "timestamp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_screenName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "screenName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_text"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "text"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_hyperText"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "hyperText"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_source"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "source"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@IsNull_inReplyToUser"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "inReplyToUser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_inReplyToUser"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "inReplyToUser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@IsNull_inReplyToId"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "inReplyToId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_inReplyToId"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "inReplyToId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isRead"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isRead"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isFavorited"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isFavorited"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isReply"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isReply"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isProtected"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isProtected"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_isOneWayLove"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "isOneWayLove"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_tags"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "tags"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection
            Me._connection.ConnectionString = "data source=Tween.db"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT          Posts.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Posts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StorageDataSet.PostsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StorageDataSet.PostsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StorageDataSet.PostsDataTable = New StorageDataSet.PostsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As StorageDataSet.PostsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As StorageDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Posts")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id As Long,  _
                    ByVal Original_timestamp As Date,  _
                    ByVal Original_name As String,  _
                    ByVal Original_screenName As String,  _
                    ByVal Original_imageUri As String,  _
                    ByVal Original_text As String,  _
                    ByVal Original_hyperText As String,  _
                    ByVal Original_source As String,  _
                    ByVal Original_inReplyToUser As String,  _
                    ByVal Original_inReplyToId As Global.System.Nullable(Of Long),  _
                    ByVal Original_isRead As Boolean,  _
                    ByVal Original_isFavorited As Boolean,  _
                    ByVal Original_isReply As Boolean,  _
                    ByVal Original_isProtected As Boolean,  _
                    ByVal Original_isOneWayLove As Boolean,  _
                    ByVal Original_tags As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_timestamp,Date)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name,String)
            End If
            If (Original_screenName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_screenName")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_screenName,String)
            End If
            If (Original_imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_imageUri")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_imageUri,String)
            End If
            If (Original_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_text")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_text,String)
            End If
            If (Original_hyperText Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hyperText")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_hyperText,String)
            End If
            If (Original_source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_source")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_source,String)
            End If
            If (Original_inReplyToUser Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_inReplyToUser,String)
            End If
            If (Original_inReplyToId.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_inReplyToId.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_isRead,Boolean)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_isFavorited,Boolean)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_isReply,Boolean)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_isProtected,Boolean)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_isOneWayLove,Boolean)
            If (Original_tags Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tags")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_tags,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Long,  _
                    ByVal timestamp As Date,  _
                    ByVal name As String,  _
                    ByVal screenName As String,  _
                    ByVal imageUri As String,  _
                    ByVal text As String,  _
                    ByVal hyperText As String,  _
                    ByVal source As String,  _
                    ByVal inReplyToUser As String,  _
                    ByVal inReplyToId As Global.System.Nullable(Of Long),  _
                    ByVal isRead As Boolean,  _
                    ByVal isFavorited As Boolean,  _
                    ByVal isReply As Boolean,  _
                    ByVal isProtected As Boolean,  _
                    ByVal isOneWayLove As Boolean,  _
                    ByVal tags As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(timestamp,Date)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name,String)
            End If
            If (screenName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("screenName")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(screenName,String)
            End If
            If (imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("imageUri")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(imageUri,String)
            End If
            If (text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("text")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(text,String)
            End If
            If (hyperText Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hyperText")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(hyperText,String)
            End If
            If (source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("source")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(source,String)
            End If
            If (inReplyToUser Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(inReplyToUser,String)
            End If
            If (inReplyToId.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(inReplyToId.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(isRead,Boolean)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(isFavorited,Boolean)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(isReply,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(isProtected,Boolean)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(isOneWayLove,Boolean)
            If (tags Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tags")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(tags,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal timestamp As Date,  _
                    ByVal name As String,  _
                    ByVal screenName As String,  _
                    ByVal imageUri As String,  _
                    ByVal text As String,  _
                    ByVal hyperText As String,  _
                    ByVal source As String,  _
                    ByVal inReplyToUser As String,  _
                    ByVal inReplyToId As Global.System.Nullable(Of Long),  _
                    ByVal isRead As Boolean,  _
                    ByVal isFavorited As Boolean,  _
                    ByVal isReply As Boolean,  _
                    ByVal isProtected As Boolean,  _
                    ByVal isOneWayLove As Boolean,  _
                    ByVal tags As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_timestamp As Date,  _
                    ByVal Original_name As String,  _
                    ByVal Original_screenName As String,  _
                    ByVal Original_imageUri As String,  _
                    ByVal Original_text As String,  _
                    ByVal Original_hyperText As String,  _
                    ByVal Original_source As String,  _
                    ByVal Original_inReplyToUser As String,  _
                    ByVal Original_inReplyToId As Global.System.Nullable(Of Long),  _
                    ByVal Original_isRead As Boolean,  _
                    ByVal Original_isFavorited As Boolean,  _
                    ByVal Original_isReply As Boolean,  _
                    ByVal Original_isProtected As Boolean,  _
                    ByVal Original_isOneWayLove As Boolean,  _
                    ByVal Original_tags As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(timestamp,Date)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name,String)
            End If
            If (screenName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("screenName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(screenName,String)
            End If
            If (imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("imageUri")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(imageUri,String)
            End If
            If (text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("text")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(text,String)
            End If
            If (hyperText Is Nothing) Then
                Throw New Global.System.ArgumentNullException("hyperText")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(hyperText,String)
            End If
            If (source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("source")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(source,String)
            End If
            If (inReplyToUser Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(inReplyToUser,String)
            End If
            If (inReplyToId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(inReplyToId.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(isRead,Boolean)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(isFavorited,Boolean)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(isReply,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(isProtected,Boolean)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(isOneWayLove,Boolean)
            If (tags Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tags")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(tags,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_id,Long)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_timestamp,Date)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_name,String)
            End If
            If (Original_screenName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_screenName")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_screenName,String)
            End If
            If (Original_imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_imageUri")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_imageUri,String)
            End If
            If (Original_text Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_text")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_text,String)
            End If
            If (Original_hyperText Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_hyperText")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_hyperText,String)
            End If
            If (Original_source Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_source")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_source,String)
            End If
            If (Original_inReplyToUser Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_inReplyToUser,String)
            End If
            If (Original_inReplyToId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_inReplyToId.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_isRead,Boolean)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_isFavorited,Boolean)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_isReply,Boolean)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_isProtected,Boolean)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_isOneWayLove,Boolean)
            If (Original_tags Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tags")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_tags,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal timestamp As Date,  _
                    ByVal name As String,  _
                    ByVal screenName As String,  _
                    ByVal imageUri As String,  _
                    ByVal text As String,  _
                    ByVal hyperText As String,  _
                    ByVal source As String,  _
                    ByVal inReplyToUser As String,  _
                    ByVal inReplyToId As Global.System.Nullable(Of Long),  _
                    ByVal isRead As Boolean,  _
                    ByVal isFavorited As Boolean,  _
                    ByVal isReply As Boolean,  _
                    ByVal isProtected As Boolean,  _
                    ByVal isOneWayLove As Boolean,  _
                    ByVal tags As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_timestamp As Date,  _
                    ByVal Original_name As String,  _
                    ByVal Original_screenName As String,  _
                    ByVal Original_imageUri As String,  _
                    ByVal Original_text As String,  _
                    ByVal Original_hyperText As String,  _
                    ByVal Original_source As String,  _
                    ByVal Original_inReplyToUser As String,  _
                    ByVal Original_inReplyToId As Global.System.Nullable(Of Long),  _
                    ByVal Original_isRead As Boolean,  _
                    ByVal Original_isFavorited As Boolean,  _
                    ByVal Original_isReply As Boolean,  _
                    ByVal Original_isProtected As Boolean,  _
                    ByVal Original_isOneWayLove As Boolean,  _
                    ByVal Original_tags As String) As Integer
            Return Me.Update(Original_id, timestamp, name, screenName, imageUri, text, hyperText, source, inReplyToUser, inReplyToId, isRead, isFavorited, isReply, isProtected, isOneWayLove, tags, Original_id, Original_timestamp, Original_name, Original_screenName, Original_imageUri, Original_text, Original_hyperText, Original_source, Original_inReplyToUser, Original_inReplyToId, Original_isRead, Original_isFavorited, Original_isReply, Original_isProtected, Original_isOneWayLove, Original_tags)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IconsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Icons"
            tableMapping.ColumnMappings.Add("imageUri", "imageUri")
            tableMapping.ColumnMappings.Add("width", "width")
            tableMapping.ColumnMappings.Add("height", "height")
            tableMapping.ColumnMappings.Add("image", "image")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Icons] WHERE (([imageUri] = @Original_imageUri) AND ([width] = @Orig"& _ 
                "inal_width) AND ([height] = @Original_height) AND ([image] = @Original_image))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_width"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "width"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_height"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "height"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_image"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Icons] ([imageUri], [width], [height], [image]) VALUES (@imageUri, @"& _ 
                "width, @height, @image)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@width"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "width"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@height"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "height"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@image"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "image"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Icons] SET [imageUri] = @imageUri, [width] = @width, [height] = @height, "& _ 
                "[image] = @image WHERE (([imageUri] = @Original_imageUri) AND ([width] = @Origin"& _ 
                "al_width) AND ([height] = @Original_height) AND ([image] = @Original_image))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@width"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "width"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@height"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "height"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@image"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "image"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_imageUri"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "imageUri"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_width"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "width"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_height"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "height"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter
            param.ParameterName = "@Original_image"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "image"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection
            Me._connection.ConnectionString = "data source=Tween.db"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT          Icons.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Icons"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StorageDataSet.IconsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StorageDataSet.IconsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StorageDataSet.IconsDataTable = New StorageDataSet.IconsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As StorageDataSet.IconsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As StorageDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Icons")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_imageUri As String, ByVal Original_width As Integer, ByVal Original_height As Integer, ByVal Original_image() As Byte) As Integer
            If (Original_imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_imageUri")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_imageUri,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_width,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_height,Integer)
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_image,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal imageUri As String, ByVal width As Integer, ByVal height As Integer, ByVal image() As Byte) As Integer
            If (imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("imageUri")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(imageUri,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(width,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(height,Integer)
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(image,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal imageUri As String, ByVal width As Integer, ByVal height As Integer, ByVal image() As Byte, ByVal Original_imageUri As String, ByVal Original_width As Integer, ByVal Original_height As Integer, ByVal Original_image() As Byte) As Integer
            If (imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("imageUri")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(imageUri,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(width,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(height,Integer)
            If (image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("image")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(image,Byte())
            End If
            If (Original_imageUri Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_imageUri")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_imageUri,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_width,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_height,Integer)
            If (Original_image Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_image")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_image,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal width As Integer, ByVal height As Integer, ByVal image() As Byte, ByVal Original_imageUri As String, ByVal Original_width As Integer, ByVal Original_height As Integer, ByVal Original_image() As Byte) As Integer
            Return Me.Update(Original_imageUri, width, height, image, Original_imageUri, Original_width, Original_height, Original_image)
        End Function
    End Class
End Namespace
